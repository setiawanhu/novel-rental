/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rental;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Genre;
import model.Log;
import model.Member;
import model.Novel;
import model.TransactionDetail;
import model.User;
import repository.LogRepository;
import repository.MemberRepository;
import repository.NovelRepository;
import repository.TransactionRepository;

/**
 *
 * @author setiawanhu
 */
public class Transaction extends javax.swing.JFrame {
    private User authUser;
    private ArrayList<Novel> selectedNovels;
    private Member selectedMember;
    private DefaultTableModel tableModel;
    
    /**
     * Creates new form Transaction
     */
    public Transaction() {
        initComponents();
        selectedNovels = new ArrayList<>();
        tableModel = (DefaultTableModel) tblTransaction.getModel();
    }
    
    public Transaction(User authUser){
        initComponents();
        this.authUser = authUser;
        selectedNovels = new ArrayList<>();
        tableModel = (DefaultTableModel) tblTransaction.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameSelectNovel = new javax.swing.JFrame();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNovel = new javax.swing.JTable();
        btnNovelSelect = new javax.swing.JButton();
        frameSelectMember = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMember = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransaction = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        txtFind = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtMemberId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMemberName = new javax.swing.JTextField();

        frameSelectNovel.setBackground(new java.awt.Color(236, 233, 221));
        frameSelectNovel.setPreferredSize(new java.awt.Dimension(932, 700));
        frameSelectNovel.setSize(new java.awt.Dimension(932, 700));

        jLabel10.setFont(new java.awt.Font("MyriadSetPro-Semibold Semi-Bold", 1, 36)); // NOI18N
        jLabel10.setText("Novel List");

        tblNovel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Author", "Language", "Publisher", "Publication Date", "Rent Price", "Pages", "ISBN", "Condition", "Status", "Genre"
            }
        ));
        jScrollPane3.setViewportView(tblNovel);

        btnNovelSelect.setText("Select");
        btnNovelSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovelSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameSelectNovelLayout = new javax.swing.GroupLayout(frameSelectNovel.getContentPane());
        frameSelectNovel.getContentPane().setLayout(frameSelectNovelLayout);
        frameSelectNovelLayout.setHorizontalGroup(
            frameSelectNovelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameSelectNovelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(frameSelectNovelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovelSelect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        frameSelectNovelLayout.setVerticalGroup(
            frameSelectNovelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameSelectNovelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNovelSelect)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        frameSelectMember.setBackground(new java.awt.Color(236, 233, 221));
        frameSelectMember.setSize(new java.awt.Dimension(743, 469));

        tblMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Email", "Phone", "Address", "DOB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMemberMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMember);

        jLabel11.setFont(new java.awt.Font("MyriadSetPro-Semibold Semi-Bold", 1, 36)); // NOI18N
        jLabel11.setText("Member List");

        javax.swing.GroupLayout frameSelectMemberLayout = new javax.swing.GroupLayout(frameSelectMember.getContentPane());
        frameSelectMember.getContentPane().setLayout(frameSelectMemberLayout);
        frameSelectMemberLayout.setHorizontalGroup(
            frameSelectMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameSelectMemberLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameSelectMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameSelectMemberLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel11)))
                .addContainerGap())
        );
        frameSelectMemberLayout.setVerticalGroup(
            frameSelectMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameSelectMemberLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(236, 233, 221));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblTransaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Novel ID", "Novel Title", "Author", "Return Date", "Penalty", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTransaction);

        jLabel9.setFont(new java.awt.Font("MyriadSetPro-Semibold Semi-Bold", 1, 36)); // NOI18N
        jLabel9.setText("Transaction");

        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSubmit.setText("Confirm Transaction");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        txtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindActionPerformed(evt);
            }
        });

        jLabel1.setText("Find Novel ID:");

        btnClear.setText("Remove Selected Record");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel2.setText("Member ID:");

        txtMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIdActionPerformed(evt);
            }
        });

        jLabel3.setText("Member Name:");

        txtMemberName.setEditable(false);
        txtMemberName.setBackground(new java.awt.Color(185, 185, 185));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMemberId)
                            .addComponent(txtMemberName, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFind)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSubmit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnClear)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindActionPerformed
        //Show the select novel window
        frameSelectNovel.setVisible(true);
        getNovelsById();
    }//GEN-LAST:event_txtFindActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Show the select novel window
        frameSelectNovel.setVisible(true);
        getNovels();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnNovelSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovelSelectActionPerformed
        int[] selectedRows = tblNovel.getSelectedRows();
        setSelectedNovels(selectedRows);
        frameSelectNovel.setVisible(false);
    }//GEN-LAST:event_btnNovelSelectActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        removeRecord();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIdActionPerformed
        frameSelectMember.setVisible(true);
        getMembersById();
    }//GEN-LAST:event_txtMemberIdActionPerformed

    private void tblMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMemberMouseClicked
        int selectedRow = tblMember.getSelectedRow();
        setSelectedMember(selectedRow);
        frameSelectMember.setVisible(false);
    }//GEN-LAST:event_tblMemberMouseClicked

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        create();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
        new Home(authUser).setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transaction().setVisible(true);
            }
        });
    }
    
    /**
     * Create a new transaction
     * 
     */
    private void create(){
        int memberId;
        try {
            memberId = Integer.parseInt(txtMemberId.getText());
        } catch(Exception e){
            memberId = 0;
        }
        String memberName = txtMemberName.getText();
        
        if(memberId == 0 || tblTransaction.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Please fill the empty field", "Transaction", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        Member member = new Member();
        member.setId(memberId);
        member.setName(memberName);
        
        model.Transaction transaction = new model.Transaction(member, authUser, "not finished");
        
        //Set the transaction detail
        ArrayList<TransactionDetail> details = new ArrayList<>();
        for(int i = 0; i < tblTransaction.getRowCount(); i++){
            int novelId = Integer.parseInt(tblTransaction.getValueAt(i, 0).toString());
            String title = tblTransaction.getValueAt(i, 1).toString();
            String author = tblTransaction.getValueAt(i, 2).toString();
            
            Novel novel = new Novel();
            novel.setId(novelId);
            novel.setTitle(title);
            novel.setAuthor(author);
            
            details.add(new TransactionDetail(0, novel, null, 0));
        }
        
        transaction.setTransactionDetails(details);
        
        if(TransactionRepository.create(transaction)){
            LogRepository.create(new Log(0, authUser.getId(), "Peminjaman", "INSERT"));
            
            JOptionPane.showMessageDialog(null, "Transaction successful", "Transaction", JOptionPane.INFORMATION_MESSAGE);
            
            dispose();
            new Home(authUser).setVisible(true);
        }
    }
    
    /**
     * Retrieve all novels in the storage
     * 
     */
    private void getNovels(){
        //Retrieve the novel list
        ArrayList<Novel> novels = NovelRepository.findAllWhereNotBorrowed();
        
        //Populate the JTable
        DefaultTableModel model = (DefaultTableModel) tblNovel.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[12];
        for(int i = 0; i < novels.size(); i++){
            if(isNovelSelected(novels.get(i))){
                continue;
            }
            
            row[0] = novels.get(i).getId();
            row[1] = novels.get(i).getTitle();
            row[2] = novels.get(i).getAuthor();
            row[3] = novels.get(i).getLanguage();
            row[4] = novels.get(i).getPublisher();
            row[5] = novels.get(i).getPublicationDate();
            row[6] = novels.get(i).getRentPrice();
            row[7] = novels.get(i).getPages();
            row[8] = novels.get(i).getIsbn();
            row[9] = novels.get(i).getKondisi();
            row[10] = novels.get(i).getStatus();
            
            String genre = "";
            ArrayList<Genre> genres = novels.get(i).getGenres();
            for(int j = 0; j < genres.size(); j++){
                if(j != genres.size()-1){
                    genre = genre.concat(genres.get(j).getName() + ", ");
                }
                else{
                    genre = genre.concat(genres.get(j).getName());
                }
            }
            row[11] = genre;
            
            model.addRow(row);
        }
    }
    
    /**
     * Retrieve novels from the storage by id
     * 
     */
    private void getNovelsById(){
        String keyId = txtFind.getText();
        
        //Retrieve the novel list
        ArrayList<Novel> novels = NovelRepository.findById(keyId);
        
        //Populate the JTable
        DefaultTableModel model = (DefaultTableModel) tblNovel.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[12];
        for(int i = 0; i < novels.size(); i++){
            if(isNovelSelected(novels.get(i))){
                continue;
            }
            
            row[0] = novels.get(i).getId();
            row[1] = novels.get(i).getTitle();
            row[2] = novels.get(i).getAuthor();
            row[3] = novels.get(i).getLanguage();
            row[4] = novels.get(i).getPublisher();
            row[5] = novels.get(i).getPublicationDate();
            row[6] = novels.get(i).getRentPrice();
            row[7] = novels.get(i).getPages();
            row[8] = novels.get(i).getIsbn();
            row[9] = novels.get(i).getKondisi();
            row[10] = novels.get(i).getStatus();
            
            String genre = "";
            ArrayList<Genre> genres = novels.get(i).getGenres();
            for(int j = 0; j < genres.size(); j++){
                if(j != genres.size()-1){
                    genre = genre.concat(genres.get(j).getName() + ", ");
                }
                else{
                    genre = genre.concat(genres.get(j).getName());
                }
            }
            row[11] = genre;
            
            model.addRow(row);
        }
    }
    
    /**
     * Set the selected novels to the transaction detail table
     * 
     */
    private void setSelectedNovels(int[] selectedRows){
        Object[] row = new Object[6];
        for(int i = 0; i < selectedRows.length; i++){
            int id = Integer.parseInt(tblNovel.getValueAt(selectedRows[i], 0).toString());
            
            Novel novel = NovelRepository.findById(id);
            
            row[0] = novel.getId();
            row[1] = novel.getTitle();
            row[2] = novel.getAuthor();
            row[3] = "-";
            row[4] = "-";
            row[5] = false;
            
            tableModel.addRow(row);
            selectedNovels.add(novel);
        }
    }
    
    /**
     * Clear selected row(s) in the transaction table
     * 
     */
    private void removeRecord(){        
        boolean isExist = false;
        int rowCount = tblTransaction.getRowCount();
        
        if(rowCount == 0){
            JOptionPane.showMessageDialog(null, "The table is empty", "Transaction", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        for(int i = 0; i < rowCount; i++){
            if(i == -1)
                continue;
            
            Boolean isSelected = Boolean.valueOf(tblTransaction.getValueAt(i, 5).toString());
            
            if(isSelected){
                tableModel.removeRow(i);
                selectedNovels.remove(i);
                isExist = true;
                i = -1;
            }
        }
        
        if(!isExist){
            JOptionPane.showMessageDialog(null, "No record selected", "Transaction", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }
    
    /**
     * Retrieve all members from storage
     * 
     */
    private void getMembersById(){
        String id = txtMemberId.getText();
        
        //Retrieve member list
        ArrayList<Member> members = MemberRepository.findById(id);
        
        //Populate the JTable
        DefaultTableModel model = (DefaultTableModel)tblMember.getModel();
        model.setRowCount(0);

        Object[] row = new Object[6];
        for(int i = 0; i < members.size(); i++){
            if(isMemberSelected(members.get(i).getId())){
                continue;
            }
            
            row[0] = members.get(i).getId();
            row[1] = members.get(i).getName();
            row[2] = members.get(i).getEmail();
            row[3] = members.get(i).getPhone();
            row[4] = members.get(i).getAddress();
            row[5] = members.get(i).getDob();

            model.addRow(row);
        }
    }
    
    /**
     * Set the selected member to the member text box
     * 
     */
    private void setSelectedMember(int selectedRow){
        int id = Integer.parseInt(tblMember.getValueAt(selectedRow, 0).toString());
        String name = tblMember.getValueAt(selectedRow, 1).toString();
        String email = tblMember.getValueAt(selectedRow, 2).toString();
        String phone = tblMember.getValueAt(selectedRow, 3).toString();
        String address = tblMember.getValueAt(selectedRow, 4).toString();
        String dob = tblMember.getValueAt(selectedRow, 5).toString();
        
        Member member = new Member(id, name, email, phone, address, dob);
        
        //Set the selected member
        selectedMember = member;
        
        txtMemberId.setText(String.valueOf(id));
        txtMemberName.setText(name);
    }
    
    /**
     * Determine whether the novel's already selected / not
     * 
     * @return boolean
     */
    private boolean isNovelSelected(Novel novel){
        for(Novel n: selectedNovels){
            if(novel.getId() == n.getId()){
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Determine whether the member's already selected / not
     * 
     * @param id int
     * @return boolean
     */
    private boolean isMemberSelected(int id){
        if(selectedMember == null){
            return false;
        }
        
        if(id == selectedMember.getId()){
            return true;
        }
        else{
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnNovelSelect;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JFrame frameSelectMember;
    private javax.swing.JFrame frameSelectNovel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblMember;
    private javax.swing.JTable tblNovel;
    private javax.swing.JTable tblTransaction;
    private javax.swing.JTextField txtFind;
    private javax.swing.JTextField txtMemberId;
    private javax.swing.JTextField txtMemberName;
    // End of variables declaration//GEN-END:variables
}
