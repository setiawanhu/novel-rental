/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rental;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Genre;
import model.Log;
import model.Member;
import model.Novel;
import model.User;
import repository.GenreRepository;
import repository.LogRepository;
import repository.MemberRepository;
import repository.NovelRepository;
import util.StringUtil;

/**
 *
 * @author setiawanhu
 */
public class MasterNovel extends javax.swing.JFrame {
    private User authUser;
    private ArrayList<JCheckBox> checkboxes = new ArrayList<>();
    
    /**
     * Creates new form MasterNovel
     */
    public MasterNovel() {
        initComponents();
        getGenres();
        getNovels();
    }
    
    public MasterNovel(User authUser){
        initComponents();
        this.authUser = authUser;
        getGenres();
        getNovels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblNovel = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        txtTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        txtLanguage = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPublisher = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtRentPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPages = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        datePubDate = new com.toedter.calendar.JDateChooser();
        txtIsbn = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtCreatedAt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblGenre = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbCondition = new javax.swing.JComboBox<>();
        cmbStatus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(236, 233, 221));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblNovel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Author", "Language", "Publisher", "Publication Date", "Rent Price", "Pages", "ISBN", "Condition", "Status", "Genre"
            }
        ));
        tblNovel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNovelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNovel);

        jLabel9.setFont(new java.awt.Font("MyriadSetPro-Semibold Semi-Bold", 1, 36)); // NOI18N
        jLabel9.setText("Master Novel");

        jLabel1.setText("ID:");

        txtId.setEditable(false);
        txtId.setBackground(new java.awt.Color(185, 185, 185));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        jLabel2.setText("Title:");

        txtAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorActionPerformed(evt);
            }
        });

        txtLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLanguageActionPerformed(evt);
            }
        });

        jLabel3.setText("Language:");

        jLabel4.setText("Author:");

        txtPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPublisherActionPerformed(evt);
            }
        });

        jLabel5.setText("Pub Date:");

        jLabel6.setText("Publisher:");

        txtRentPrice.setToolTipText("");
        txtRentPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRentPriceActionPerformed(evt);
            }
        });

        jLabel7.setText("Rent Price:");

        txtPages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPagesActionPerformed(evt);
            }
        });

        jLabel8.setText("Pages:");

        datePubDate.setDateFormatString("yyyy-MM-dd");
        datePubDate.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                datePubDateAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        txtIsbn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIsbnActionPerformed(evt);
            }
        });

        jLabel10.setText("ISBN:");

        jLabel11.setText("Status:");

        jLabel12.setText("Condition:");

        jLabel13.setText("Genre:");

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtCreatedAt.setEditable(false);

        jLabel14.setText("Insert Date:");

        tblGenre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Checked"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblGenre.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblGenre);
        if (tblGenre.getColumnModel().getColumnCount() > 0) {
            tblGenre.getColumnModel().getColumn(0).setResizable(false);
            tblGenre.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel15.setText("Search:");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bagus", "Rusak" }));

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Borrowed" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIsbn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPages, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtRentPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(datePubDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(txtLanguage)
                            .addComponent(txtAuthor)
                            .addComponent(txtTitle)
                            .addComponent(txtId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPublisher, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCreatedAt)
                            .addComponent(cmbCondition, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.Alignment.TRAILING, 0, 1, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(314, 314, 314)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsert)
                            .addComponent(btnDelete))
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(datePubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtIsbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(cmbCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCreatedAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        create();
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        destroy();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblNovelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNovelMouseClicked
        int index = tblNovel.getSelectedRow();
        showNovel(index);
    }//GEN-LAST:event_tblNovelMouseClicked

    private void txtPagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPagesActionPerformed
        create();
    }//GEN-LAST:event_txtPagesActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        search();
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        create();
    }//GEN-LAST:event_txtTitleActionPerformed

    private void txtAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorActionPerformed
        create();
    }//GEN-LAST:event_txtAuthorActionPerformed

    private void txtLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLanguageActionPerformed
        create();
    }//GEN-LAST:event_txtLanguageActionPerformed

    private void txtPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPublisherActionPerformed
        create();
    }//GEN-LAST:event_txtPublisherActionPerformed

    private void datePubDateAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_datePubDateAncestorAdded
        create();
    }//GEN-LAST:event_datePubDateAncestorAdded

    private void txtRentPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRentPriceActionPerformed
        create();
    }//GEN-LAST:event_txtRentPriceActionPerformed

    private void txtIsbnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIsbnActionPerformed
        create();
    }//GEN-LAST:event_txtIsbnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
        new Home(authUser).setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Creating a new novel record
     * 
     */
    private void create(){
        int id = 0;
        String title = StringUtil.toTitleCase(txtTitle.getText());
        String author = StringUtil.toTitleCase(txtAuthor.getText());
        String language = txtLanguage.getText();
        String publisher = txtPublisher.getText();
        String publicationDate;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try{
            publicationDate = dateFormat.format(datePubDate.getDate());
        } catch (Exception e){
            publicationDate = "";
        }
        int rentPrice;
        try{
            rentPrice = Integer.parseInt(txtRentPrice.getText());
        } catch (Exception e){
            rentPrice = 0;
        }
        int pages;
        try{
            pages = Integer.parseInt(txtPages.getText());
        } catch (Exception e){
            pages = 0;
        }
        String isbn = txtIsbn.getText();
        String kondisi = cmbCondition.getSelectedItem().toString();
        String status = cmbStatus.getSelectedItem().toString();
        
        Novel novel = new Novel(id, title, author, language, publisher, publicationDate, rentPrice, pages, isbn, kondisi, status);
        
        ArrayList<Genre> genres = new ArrayList<>();
        
        DefaultTableModel model = (DefaultTableModel) tblGenre.getModel();
        for(int i = 0;i < tblGenre.getRowCount(); i++){
            String genreName = model.getValueAt(i, 0).toString();
            Boolean isSelected = Boolean.valueOf(model.getValueAt(i, 1).toString());
            
            if(isSelected)
                genres.add(getGenre(genreName));
        }
        
        novel.setGenres(genres);
        
        
        if(title.equals("") || author.equals("") || language.equals("") || publisher.equals("") || publicationDate.equals("") || rentPrice == 0 
                || pages == 0 || isbn.equals("") || kondisi.equals("") ||  status.equals("")){
            JOptionPane.showMessageDialog(null, "Please fill the empty field(s)", "Insert", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            if(NovelRepository.create(novel)){
                LogRepository.create(new Log(0, authUser.getId(), "Novel", "INSERT"));
                JOptionPane.showMessageDialog(null, "Insert successful", "Insert", JOptionPane.INFORMATION_MESSAGE);
                
                txtId.setText("");
                txtTitle.setText("");
                txtAuthor.setText("");
                txtLanguage.setText("");
                txtPublisher.setText("");
                datePubDate.setCalendar(null);
                txtRentPrice.setText("");
                txtPages.setText("");
                txtIsbn.setText("");
                
                getNovels();
            }
            else{
                JOptionPane.showMessageDialog(null, "Oops, something's wrong", "Insert", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    /**
     * Destroy selected novel record
     * 
     */
    private void destroy(){
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure want to delete this record?","Delete",dialogButton);
            
            if(dialogResult == JOptionPane.YES_OPTION){
                if(NovelRepository.destroy(Integer.parseInt(txtId.getText()))){
                    LogRepository.create(new Log(0, authUser.getId(), "Member", "DELETE"));

                    JOptionPane.showMessageDialog(null, "Delete successful", "Delete", JOptionPane.INFORMATION_MESSAGE);

                    txtId.setText("");
                    txtTitle.setText("");
                    txtAuthor.setText("");
                    txtLanguage.setText("");
                    txtPublisher.setText("");
                    datePubDate.setCalendar(null);
                    txtRentPrice.setText("");
                    txtPages.setText("");
                    txtIsbn.setText("");

                    getNovels();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Oops, something's wrong", "Delete", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Please choose a record", "Delete", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * Update selected novel record 
     * 
     */
    private void update(){
        int id;
        
        try{
            id = Integer.parseInt(txtId.getText());
        } catch (Exception e){
            id = 0;
        }
        String title = StringUtil.toTitleCase(txtTitle.getText());
        String author = StringUtil.toTitleCase(txtAuthor.getText());
        String language = txtLanguage.getText();
        String publisher = txtPublisher.getText();
        String publicationDate;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try{
            publicationDate = dateFormat.format(datePubDate.getDate());
        } catch (Exception e){
            publicationDate = "";
        }
        int rentPrice;
        try{
            rentPrice = Integer.parseInt(txtRentPrice.getText());
        } catch (Exception e){
            rentPrice = 0;
        }
        int pages;
        try{
            pages = Integer.parseInt(txtPages.getText());
        } catch (Exception e){
            pages = 0;
        }
        String isbn = txtIsbn.getText();
        String kondisi = cmbCondition.getSelectedItem().toString();
        String status = cmbStatus.getSelectedItem().toString();
        
        Novel novel = new Novel(id, title, author, language, publisher, publicationDate, rentPrice, pages, isbn, kondisi, status);
        
        ArrayList<Genre> genres = new ArrayList<>();
        
        DefaultTableModel model = (DefaultTableModel) tblGenre.getModel();
        for(int i = 0;i < tblGenre.getRowCount(); i++){
            String genreName = model.getValueAt(i, 0).toString();
            Boolean isSelected = Boolean.valueOf(model.getValueAt(i, 1).toString());
            
            if(isSelected)
                genres.add(getGenre(genreName));
        }
        
        novel.setGenres(genres);
        
        if(id == 0){
            JOptionPane.showMessageDialog(null, "Please select a record", "Update", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(title.equals("") || author.equals("") || language.equals("") || publisher.equals("") || publicationDate.equals("") || rentPrice == 0 
                || pages == 0 || isbn.equals("") || kondisi.equals("") ||  status.equals("")){
            JOptionPane.showMessageDialog(null, "Please fill the empty field(s)", "Update", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            if(NovelRepository.update(id, novel)){
                LogRepository.create(new Log(0, authUser.getId(), "Novel", "UPDATE"));
                JOptionPane.showMessageDialog(null, "Update successful", "Update", JOptionPane.INFORMATION_MESSAGE);
                
                getNovels();
            }
            else{
                JOptionPane.showMessageDialog(null, "Oops, something's wrong", "Update", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    /**
     * Retrieve selected genre instance
     * 
     * @param genreName String
     * @return Genre
     */
    private Genre getGenre(String genreName){
        ArrayList<Genre> availableGenres = GenreRepository.findAll();
        
        for(Genre genre: availableGenres){
            if(genre.getName().equals(genreName))
                return genre;
        }
        
        return null;
    }
    
    /**
     * Search novel by names
     * 
     */
    private void search(){
        String keyword = txtSearch.getText();
        
        if(keyword.equals("")){
            getNovels();
        }
        else{
            //Retrieve the novel list
            ArrayList<Novel> novels = NovelRepository.findByTitle(keyword);

            //Populate the JTable
            DefaultTableModel model = (DefaultTableModel) tblNovel.getModel();
            model.setRowCount(0);

            Object[] row = new Object[12];
            for(int i = 0; i < novels.size(); i++){
                row[0] = novels.get(i).getId();
                row[1] = novels.get(i).getTitle();
                row[2] = novels.get(i).getAuthor();
                row[3] = novels.get(i).getLanguage();
                row[4] = novels.get(i).getPublisher();
                row[5] = novels.get(i).getPublicationDate();
                row[6] = novels.get(i).getRentPrice();
                row[7] = novels.get(i).getPages();
                row[8] = novels.get(i).getIsbn();
                row[9] = novels.get(i).getKondisi();
                row[10] = novels.get(i).getStatus();

                String genre = "";
                ArrayList<Genre> genres = novels.get(i).getGenres();
                for(int j = 0; j < genres.size(); j++){
                    if(j != genres.size()-1){
                        genre = genre.concat(genres.get(j).getName() + ", ");
                    }
                    else{
                        genre = genre.concat(genres.get(j).getName());
                    }
                }
                row[11] = genre;

                model.addRow(row);
            }
        }
    }
    
    /**
     * Retrieve all novels in the storage
     * 
     */
    private void getNovels(){
        //Retrieve the novel list
        ArrayList<Novel> novels = NovelRepository.findAll();
        
        //Populate the JTable
        DefaultTableModel model = (DefaultTableModel) tblNovel.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[12];
        for(int i = 0; i < novels.size(); i++){
            row[0] = novels.get(i).getId();
            row[1] = novels.get(i).getTitle();
            row[2] = novels.get(i).getAuthor();
            row[3] = novels.get(i).getLanguage();
            row[4] = novels.get(i).getPublisher();
            row[5] = novels.get(i).getPublicationDate();
            row[6] = novels.get(i).getRentPrice();
            row[7] = novels.get(i).getPages();
            row[8] = novels.get(i).getIsbn();
            row[9] = novels.get(i).getKondisi();
            row[10] = novels.get(i).getStatus();
            
            String genre = "";
            ArrayList<Genre> genres = novels.get(i).getGenres();
            for(int j = 0; j < genres.size(); j++){
                if(j != genres.size()-1){
                    genre = genre.concat(genres.get(j).getName() + ", ");
                }
                else{
                    genre = genre.concat(genres.get(j).getName());
                }
            }
            row[11] = genre;
            
            model.addRow(row);
        }
    }
    
    /**
     * Show novel's information if a record is being selected
     * 
     * @param index int
     */
    private void showNovel(int index){
        //Retrieve novel
        Novel novel = NovelRepository.findAll().get(index);
        
        txtId.setText(String.valueOf(novel.getId()));
        txtTitle.setText(novel.getTitle());
        txtAuthor.setText(novel.getAuthor());
        txtLanguage.setText(novel.getLanguage());
        txtPublisher.setText(novel.getPublisher());
        Date date = null;
        try{
            date = new SimpleDateFormat("yyyy-MM-dd").parse(novel.getPublicationDate());
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        
        if(date != null){
            datePubDate.setDate(date);
        }
        txtRentPrice.setText(String.valueOf(novel.getRentPrice()));
        txtPages.setText(String.valueOf(novel.getPages()));
        txtIsbn.setText(novel.getIsbn());
        switch(novel.getKondisi()){
            case "Bagus":
                cmbCondition.setSelectedIndex(0);
                break;
            case "Rusak":
                cmbCondition.setSelectedIndex(1);
                break;
            default:
                cmbCondition.setSelectedIndex(0);
        }
        switch(novel.getKondisi()){
            case "Available":
                cmbStatus.setSelectedIndex(0);
                break;
            case "Borrowed":
                cmbStatus.setSelectedIndex(1);
                break;
            default:
                cmbStatus.setSelectedIndex(0);
        }
        
        date = null;
        try{
            date = new SimpleDateFormat("yyyy-MM-dd").parse(novel.getPublicationDate());
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        SimpleDateFormat format = new SimpleDateFormat("dd MMMM yyyy");
        
        txtCreatedAt.setText(format.format(date));
        
        //Set the novel genre(s)
        for(int i = 0; i < tblGenre.getRowCount(); i++){
            tblGenre.setValueAt(false, i, 1);
        }
        
        for(Genre genre: novel.getGenres()){
            tblGenre.setValueAt(true, getRowByName(tblGenre, genre.getName()), 1);
        }
    }
    
    /**
     * Retrieve the index of searched index on genre name
     * 
     * @param table
     * @param name
     * @return -1 | i int = row position of the founded data
     */
    private int getRowByName(JTable table, String name) {
        for (int i = 0; i < table.getRowCount(); ++i)
            if (table.getValueAt(i, 0).equals(name))
                return i;
        return -1;
    }
    
    /**
     * Generate genre check boxes
     * 
     */
    private void getGenres(){
        //Retrieve genre list
        ArrayList<Genre> genres = GenreRepository.findAll();
                
        //Populate the JTable
        DefaultTableModel model = (DefaultTableModel) tblGenre.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[2];
        for(Genre genre: genres){
            row[0] = genre.getName();
            row[1] = false;
            
            model.addRow(row);
        }        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasterNovel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasterNovel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasterNovel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasterNovel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MasterNovel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCondition;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser datePubDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblGenre;
    private javax.swing.JTable tblNovel;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtCreatedAt;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtIsbn;
    private javax.swing.JTextField txtLanguage;
    private javax.swing.JTextField txtPages;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtRentPrice;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
